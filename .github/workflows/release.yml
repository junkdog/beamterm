name: 📦 Release

on:
  push:
    tags:
      - 'beamterm-*'
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: 🏷️ Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🎉 Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

  build-release:
    name: 🔨 Build Release Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            atlas_binary: beamterm-atlas
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            atlas_binary: beamterm-atlas.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            atlas_binary: beamterm-atlas

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}, wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      # Platform-specific dependencies
      - name: 🔧 Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y fontconfig libfontconfig-dev fonts-noto

      # Build font atlas generator
      - name: 🔨 Build beamterm-atlas
        run: |
          cd beamterm-atlas
          cargo build --release --target ${{ matrix.target }}

      # Package atlas generator
      - name: 📦 Package atlas generator
        run: |
          mkdir -p release/beamterm-atlas-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/${{ matrix.atlas_binary }} release/beamterm-atlas-${{ matrix.target }}/
          cp README.md release/beamterm-atlas-${{ matrix.target }}/
          cd release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a beamterm-atlas-${{ matrix.target }}.zip beamterm-atlas-${{ matrix.target }}
          else
            tar czf beamterm-atlas-${{ matrix.target }}.tar.gz beamterm-atlas-${{ matrix.target }}
          fi
        shell: bash

      # Upload atlas generator
      - name: 📤 Upload atlas generator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/beamterm-atlas-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: beamterm-atlas-${{ matrix.target }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  build-wasm-release:
    name: 🕸️ Build WASM Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      - name: 📦 Install tools
        run: |
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fontconfig libfontconfig-dev fonts-noto fonts-noto-color-emoji

      # Make scripts executable
      - name: 🔧 Make scripts executable
        run: |
          chmod +x build.zsh
          chmod +x scripts/*.zsh

      # Use build.zsh for complete build
      - name: 🔧 Setup JS environment
        run: ./build.zsh setup

      - name: 🎨 Generate font atlas (baked into library)
        run: ./build.zsh atlas

      - name: 🌐 Build WASM release
        run: ./build.zsh build-wasm

      # Package web build
      - name: 📦 Package web build
        run: |
          mkdir -p release
          cd js/dist
          tar czf ../../release/beamterm-web-${{ needs.create-release.outputs.release_version }}.tar.gz *

      # Upload web build
      - name: 📤 Upload web build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/beamterm-web-${{ needs.create-release.outputs.release_version }}.tar.gz
          asset_name: beamterm-web-${{ needs.create-release.outputs.release_version }}.tar.gz
          asset_content_type: application/gzip

#  publish-crates:
#    name: 📦 Publish to crates.io
#    needs: [build-release, build-wasm-release]
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/beamterm-')
#    steps:
#      - uses: actions/checkout@v4
#      - uses: dtolnay/rust-toolchain@stable
#      - name: 🔧 Install system dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y fontconfig libfontconfig-dev
#
#      - name: Make build script executable
#        run: chmod +x build.zsh
#
#      - name: Build Rust crates
#        run: ./build.zsh build-rust
#
#      - name: ✅ Verify package contents
#        run: |
#          cd beamterm-renderer
#          EXCLUDED_FILES=("index.html" "main.rs")
#          for file in "${EXCLUDED_FILES[@]}"; do
#            if cargo package --list 2>/dev/null | grep -q "^$file$"; then
#              echo "❌ ERROR: $file would be included in the package!"
#              exit 1
#            fi
#          done
#
#      - name: Publish beamterm-data
#        run: cargo publish -p beamterm-data
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#
#      - name: Wait for crates.io
#        run: sleep 30
#
#      - name: Publish beamterm-renderer
#        run: cargo publish -p beamterm-renderer
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#
#  publish-npm:
#    name: 📦 Publish to NPM
#    needs: [build-release, build-wasm-release]
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          targets: wasm32-unknown-unknown
#
#      - name: 📦 Install wasm-pack
#        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
#
#      - name: 📦 Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '18'
#          registry-url: 'https://registry.npmjs.org'
#
#      - name: 🔧 Install system dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y fontconfig libfontconfig-dev fonts-noto fonts-noto-color-emoji
#
#      - name: 🔧 Make scripts executable
#        run: |
#          chmod +x build.zsh
#          chmod +x scripts/*.zsh
#
#      - name: 📦 Build and publish to NPM
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#        run: |
#          ./build.zsh setup
#          ./build.zsh atlas  # Baked into library
#          ./build.zsh build-wasm
#          ./build.zsh publish-npm